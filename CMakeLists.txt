# Generated Cmake Pico project file

cmake_minimum_required(VERSION 3.13)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Initialise pico_sdk from installed location
# (note this can come from environment, CMake cache etc)

# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
set(PICO_BOARD pico_w CACHE STRING "Board type")

# Pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)

set(FREERTOS_KERNEL_PATH "/home/marianasls/Documents/EmbarcaTech/FreeRTOS-Kernel") # Adiciona o FreeRTOS
include(${FREERTOS_KERNEL_PATH}/portable/ThirdParty/GCC/RP2040/FreeRTOS_Kernel_import.cmake)

project(SE_Meteorological_Station C CXX ASM)

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()


include_directories(${CMAKE_SOURCE_DIR}/lib/include) # Inclui os files .h na pasta lib
include_directories(${CMAKE_SOURCE_DIR}/lib/include/ssd1306) # Inclui os files .h na pasta ssd1306
include_directories(${CMAKE_SOURCE_DIR}/lib/include/ws2812) # Inclui os files .h na pasta ws2812


add_executable(${PROJECT_NAME}  
        SE_Meteorological_Station.c
        lib/source/aht20.c 
        lib/source/bmp280.c 
        lib/source/buzzer.c
        lib/source/data_store.c
        lib/source/ssd1306.c
        lib/source/ws2812.c
        )

target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR})  # Adiciona o diret√≥rio raiz como include privado apenas para o target atual

pico_generate_pio_header(${PROJECT_NAME} 
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/include/ws2812/ws2812.pio 
    OUTPUT_DIR ${CMAKE_CURRENT_LIST_DIR}/generated
)

# Modify the below lines to enable/disable output over UART/USB
pico_enable_stdio_uart(${PROJECT_NAME}  0)
pico_enable_stdio_usb(${PROJECT_NAME}  1)

# Add the standard library to the build
target_link_libraries(${PROJECT_NAME} 
        pico_stdlib
        hardware_i2c
        hardware_gpio
        hardware_i2c
        hardware_pwm
        hardware_clocks
        hardware_irq
        hardware_pio
        hardware_timer
        pico_bootrom
        pico_cyw43_arch_lwip_threadsafe_background
        )

pico_add_extra_outputs(${PROJECT_NAME} )

